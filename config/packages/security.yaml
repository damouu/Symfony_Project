security:
  encoders:
    App\Entity\People:
      # Use native password encoder
      # This value auto-selects the best possible hashing algorithm
      # (i.e. Sodium when available).
      algorithm: auto
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    people:
      entity:
        class: App\Entity\People
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      anonymous: true
      lazy: true
      guard:
        authenticators:
          - App\Security\PeopleAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
  # - { path: ^/pokemon, roles: ROLE_ADMIN }
  # - { path: ^/profile, roles: ROLE_USER }

  role_hierarchy:
    ROLE_EDITOR: ROLE_USER    # This line says that any user having the ROLE_EDITOR also has the ROLE_USER
    ROLE_ADMIN: ROLE_EDITOR   # so basically all user having the ROLE_ADMIN, also have the ROLE_EDITOR's and the ROLE_USER's privileges.